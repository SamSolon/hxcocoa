//
//  AlbumPickerController
//  Wwx
//
//  Source generated by Haxe Objective-C target
//

#import "AlbumPickerController.h"

@implementation AlbumPickerController

@synthesize tableView;
@synthesize library;
@synthesize groups;
@synthesize fb_albums;
@synthesize movies;
@synthesize activityView;
@synthesize loadingFacebook;
@synthesize delegate;
// Dynamic method defined with an objc method and a block property
- (void) localAlbumPicked:(ALAssetsGroup*)album{
	if ( hx_dyn_localAlbumPicked ) { hx_dyn_localAlbumPicked(album); return; }
	int x = 0;
}
@synthesize hx_dyn_localAlbumPicked;

// Dynamic method defined with an objc method and a block property
- (void) facebookAlbumPicked:(FBAlbum*)album{
	if ( hx_dyn_facebookAlbumPicked ) { hx_dyn_facebookAlbumPicked(album); return; }
}
@synthesize hx_dyn_facebookAlbumPicked;

// Dynamic method defined with an objc method and a block property
- (void) selectMovieAtPath:(NSMutableString*)path{
	if ( hx_dyn_selectMovieAtPath ) { hx_dyn_selectMovieAtPath(path); return; }
}
@synthesize hx_dyn_selectMovieAtPath;

- (void) loadView{
	
	CGRect frame = [UIScreen mainScreen].bounds;
	self.view = [[UIView alloc] init];
	self.view.frame = frame;
}
- (void) viewDidLoad{
	
	
	AlbumPickerController *_g = self;
	[Log trace:[@"album picker did load" mutableCopy] infos:@{@"fileName":@"AlbumPickerController.hx", @"lineNumber":@"43", @"className":@"AlbumPickerController", @"methodName":@"viewDidLoad"}];
	[super viewDidLoad];
	self.groups = [[NSMutableArray alloc] init];
	self.movies = [@[[@"Movie 1" mutableCopy], [@"movie 2" mutableCopy]] mutableCopy];
	self.tableView = [[UITableView alloc] init];
	self.tableView.frame = CGRectMake(20,80,self.view.frame.size.width - 40,self.view.frame.size.height - 80);
	self.tableView.delegate = self;
	self.tableView.dataSource = self;
	self.tableView.backgroundColor = [UIColor clearColor];
	self.tableView.separatorColor = [UIColor darkGrayColor];
	self.tableView.autoresizingMask = (((UIViewAutoresizingFlexibleWidth | UIViewAutoresizingFlexibleHeight) | UIViewAutoresizingFlexibleRightMargin) | UIViewAutoresizingFlexibleLeftMargin);
	[self.view addSubview:self.tableView];
	id failHandler = ^(NSError *error){
		
		[Log trace:[@"assets enumaeration failed" mutableCopy] infos:@{@"fileName":@"AlbumPickerController.hx", @"lineNumber":@"60", @"className":@"AlbumPickerController", @"methodName":@"viewDidLoad"}];
	};
	id groupsEnumerator = ^(ALAssetsGroup *group, BOOL stop){
		
		if (group != nil) {
			
			[Log trace:[@"storing asset" mutableCopy] infos:@{@"fileName":@"AlbumPickerController.hx", @"lineNumber":@"66", @"className":@"AlbumPickerController", @"methodName":@"viewDidLoad"}];
			[_g.groups push:group];
		}
		else {
			
			[Log trace:[@"reload table" mutableCopy] infos:@{@"fileName":@"AlbumPickerController.hx", @"lineNumber":@"70", @"className":@"AlbumPickerController", @"methodName":@"viewDidLoad"}];
			[_g.tableView reloadData];
		}
	};
	self.library = [[ALAssetsLibrary alloc] init];
	[self.library enumerateGroupsWithTypes:ALAssetsGroupAll usingBlock:groupsEnumerator failureBlock:failHandler];
}
- (void) viewDidAppear:(BOOL)animated{
	
}
- (int) tableView:(UITableView*)tableView numberOfRowsInSection:(int)section{
	
	if (self.movies.length > 0) switch (section){
		case 0:return self.movies.length;;
		break;
		case 1:return self.groups.length;;
		break;
		case 2:return ( (self.fb_albums != nil) ? self.fb_albums.length : 1);;
		break;
	}
	else switch (section){
		case 0:return self.groups.length;;
		break;
		case 1:return ( (self.fb_albums != nil) ? self.fb_albums.length : 1);;
		break;
	}
	return 0;
}
- (UITableViewCell*) tableView:(UITableView*)tableView_ cellForRowAtIndexPath:(NSIndexPath*)indexPath{
	
	
	NSMutableString *identif = [@"AlbumCellIdentifier" mutableCopy];
	
	AlbumTableViewCell *cell = (AlbumTableViewCell*)[tableView_ dequeueReusableCellWithIdentifier:identif];
	if (cell == nil) {
		
		cell = [[AlbumTableViewCell alloc] init];
		[cell _initWithStyle:UITableViewCellStyleDefault reuseIdentifier:identif];
	}
	int row = indexPath.row;
	cell.customImageView.image = nil;
	int shift = ( (self.movies.length > 0) ? 1 : 0);
	if (indexPath.section == 0 && shift > 0) {
		
		cell.customTextLabel.text = ((NSMutableString*)[self.movies hx_objectAtIndex:row]);
		cell.customImageView.image = [UIImage imageNamed:[@"SymbolCamera" mutableCopy]];
	}
	else if (indexPath.section == shift) {
		
		
		ALAssetsGroup *group = ((ALAssetsGroup*)[self.groups hx_objectAtIndex:row]);
		cell.customTextLabel.text = [group valueForProperty:ALAssetsGroupPropertyName];
		[cell setLocalImage:[UIImage imageWithCGImage:[group posterImage]]];
	}
	else if (indexPath.section == 1 + shift) {
		
		if (self.fb_albums == nil) {
			
			cell.customTextLabel.text = [@"Login to Facebook" mutableCopy];
			cell.customImageView.image = nil;
		}
		else {
			
			
			FBAlbum *album = ((FBAlbum*)[self.fb_albums hx_objectAtIndex:row]);
			cell.customTextLabel.text = [[[album.name stringByAppendingString:[@" ( " mutableCopy]] stringByAppendingString:album.albumId] stringByAppendingString:[@" )" mutableCopy]];
			
			NSMutableString *url = [[[[@"https://graph.facebook.com/" mutableCopy] stringByAppendingString:album.albumId] stringByAppendingString:[@"/picture?type=album&access_token=" mutableCopy]] stringByAppendingString:[FBSession activeSession].accessToken];
			[cell loadFacebookImage:url];
		}
	}
	return cell;
}
- (float) tableView:(UITableView*)tableView heightForRowAtIndexPath:(NSIndexPath*)indexPath{
	
	return 80;
}
- (void) tableView:(UITableView*)tableView_ didSelectRowAtIndexPath:(NSIndexPath*)indexPath{
	
	[Log trace:[@"Row touched" mutableCopy] infos:@{@"fileName":@"AlbumPickerController.hx", @"lineNumber":@"175", @"className":@"AlbumPickerController", @"methodName":@"didSelectRowAtIndexPath"}];
	int row = indexPath.row;
	int section = indexPath.section;
	int shift = ( (self.movies.length > 0) ? 1 : 0);
	if (section == 0 && shift > 0) {
		
	}
	else if (section == shift) {
		
		
		ALAssetsGroup *group = ((ALAssetsGroup*)[self.groups hx_objectAtIndex:row]);
		[self localAlbumPicked:group];
	}
	else if (self.fb_albums != nil) [self facebookAlbumPicked:((FBAlbum*)[self.fb_albums hx_objectAtIndex:row])];
	else if (!self.loadingFacebook) {
		
		self.activityView = [[UIActivityIndicatorView alloc]  initWithActivityIndicatorStyle:UIActivityIndicatorViewStyleWhite];
		CGRect rect = self.activityView.frame;
		rect.origin.x = 20;
		rect.origin.y = 30;
		self.activityView.frame = rect;
		[[self.tableView cellForRowAtIndexPath:indexPath] addSubview:self.activityView];
		[self.activityView startAnimating];
		[self loginToFacebook];
	}
}
- (int) numberOfSectionsInTableView:(UITableView*)tableView{
	
	return ( (self.movies.length > 0) ? 3 : 2);
}
- (UIView*) tableView:(UITableView*)tableView_ viewForHeaderInSection:(int)section{
	
	
	UIView *v = [[UIView alloc] init];
	v.frame = CGRectMake(0,0,tableView_.frame.size.width,35);
	v.layer.cornerRadius = 4;
	v.backgroundColor = [UIColor colorWithWhite:0.65 alpha:1];
	
	NSMutableString *symbol = [@"" mutableCopy];
	
	NSMutableString *title = [@"" mutableCopy];
	if (self.movies.length > 0) switch (section){
		case 0:{
			
			symbol = [@"SymbolVideo" mutableCopy];
			title = [@"My Videos" mutableCopy];
		}
		break;
		case 1:{
			
			symbol = [@"SymbolFolder" mutableCopy];
			title = [@"Local Albums" mutableCopy];
		}
		break;
		case 2:{
			
			symbol = [@"ButFb" mutableCopy];
			title = [@"Facebook Albums" mutableCopy];
		}
		break;
	}
	else switch (section){
		case 0:{
			
			symbol = [@"SymbolFolder" mutableCopy];
			title = [@"Local Albums" mutableCopy];
		}
		break;
		case 1:{
			
			symbol = [@"ButFb" mutableCopy];
			title = [@"Facebook Albums" mutableCopy];
		}
		break;
	}
	
	UIImageView *img = [[UIImageView alloc]  initWithImage:[UIImage imageNamed:symbol]];
	[v addSubview:img];
	
	UILabel *label = [[UILabel alloc] init];
	label.frame = CGRectMake(40,10,200,13);
	label.backgroundColor = [UIColor clearColor];
	label.textColor = [UIColor whiteColor];
	label.font = [UIFont boldSystemFontOfSize:13];
	label.text = title;
	[v addSubview:label];
	return v;
}
- (float) tableView:(UITableView*)tableView heightForHeaderInSection:(int)section{
	
	return 35;
}
- (void) loginToFacebook{
	
	
	AlbumPickerController *_g = self;
	self.loadingFacebook = YES;
	
	NSMutableArray *permissions = [@[[@"user_photos" mutableCopy]] mutableCopy];
	[FBSession openActiveSessionWithReadPermissions:permissions allowLoginUI:YES completionHandler:^(FBSession *session, FBSessionState status, NSError *error){
		
		if (error == nil && status == FBSessionStateOpen) [_g update];
		else {
			
			[Log trace:[@"error" mutableCopy] infos:@{@"fileName":@"AlbumPickerController.hx", @"lineNumber":@"272", @"className":@"AlbumPickerController", @"methodName":@"loginToFacebook"}];
			_g.loadingFacebook = NO;
		}
	}];
}
- (void) update{
	
	
	AlbumPickerController *_g = self;
	
	FBRequest *req = [FBRequest requestForGraphPath:[@"me/albums" mutableCopy]];
	[req startWithCompletionHandler:^(FBRequestConnection *connection, id result, NSError *error){
		
		if (result != nil) {
			
			_g.fb_albums = [[NSMutableArray alloc] init];
			
			NSMutableArray *a = [result objectForKey:[@"data" mutableCopy]];
			{
				
				int _g1 = 0;
				while (_g1 < a.length) {
					
					id obj = ((id)[a hx_objectAtIndex:_g1]);
					++_g1;
					if ([obj objectForKey:[@"count" mutableCopy]] == nil) continue;
					
					FBAlbum *album = [[FBAlbum alloc] init];
					album.name = [obj objectForKey:[@"name" mutableCopy]];
					album.nr = [obj objectForKey:[@"count" mutableCopy]];
					album.coverPhoto = [obj objectForKey:[@"cover_photo" mutableCopy]];
					album.albumId = [obj objectForKey:[@"id" mutableCopy]];
					[_g.fb_albums push:album];
				}
			}
			[_g.tableView reloadData];
			[_g.activityView stopAnimating];
			[_g.activityView removeFromSuperview];
			_g.activityView = nil;
		}
	}];
}
- (BOOL) canSwipeLeft{
	
	return NO;
}
- (BOOL) canSwipeRight{
	
	return NO;
}

@end
